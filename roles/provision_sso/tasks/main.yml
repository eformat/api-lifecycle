---
- name: Make sure we go back to default project
  shell: "oc project default"

- name: Check if image streams are available
  shell: "oc describe is redhat-sso72-openshift -n openshift"
  register: imagestream_exists
  when: configure_only == 'false'
  ignore_errors: true

- name: Create image streams for RH SSO
  shell: "oc create -f {{ sso_image_streams }} -n openshift"
  when: configure_only == 'false' and imagestream_exists.failed

- name: Create secrets for RH SSO
  shell: "oc create -f {{ sso_secret_url }} -n {{ sso_project }}"
  when: configure_only == 'false'
  register: command_result
  failed_when: "command_result.rc != 0 and 'already exists' not in command_result.stderr"  

- name: Create service account for clustering
  shell: "oc create sa sso-service-account -n {{ sso_project }}"
  when: configure_only == 'false'
  register: command_result
  failed_when: "command_result.rc != 0 and 'already exists' not in command_result.stderr"  

- name: Add cluster view policy to sa for clustering
  shell: "oc policy add-role-to-user view system:serviceaccount:{{ sso_project }}:sso-service-account -n {{ sso_project }}"
  when: configure_only == 'false'
  register: command_result
  failed_when: "command_result.rc != 0 and 'already exists' not in command_result.stderr"  

- name: Create RH SSO app
  shell:
    "oc new-app -f {{ sso_template }} -p HTTPS_NAME=jboss -p HTTPS_PASSWORD=mykeystorepass -p SSO_ADMIN_USERNAME=keyadmin \
    -p SSO_ADMIN_PASSWORD=keypassword -n {{sso_project}}"
  when: configure_only == 'false'
  register: command_result
  failed_when: "command_result.rc != 0 and 'already exists' not in command_result.stderr"  

- name: Create http service
  shell: "oc expose dc sso --name=http --port=8080 --protocol='TCP' -n {{ sso_project }}"
  register: command_result
  failed_when: "command_result.rc != 0 and 'already exists' not in command_result.stderr"  

- name: Expose http service
  shell: "oc expose svc http -name=http --hostname='{{sso_project}}.{{ocp_apps_domain}}' -n {{ sso_project }}"
  register: command_result
  failed_when: "command_result.rc != 0 and 'already exists' not in command_result.stderr"  

- name: Wait until RH SSO API is available
  uri:
    url: https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}
    method: HEAD
    follow_redirects: safe
    validate_certs: no
  register: wait_sso_result
  until: wait_sso_result is succeeded
  ignore_errors: yes
  retries: 15
  delay: 60
  when: create_realms == 'true'

- name: Get templated realm
#  uri:
#    url: "{{ sso_master_realm_url }}"
#    return_content: yes
  slurp:
    src: "{{ sso_master_realm_url }}"
  register: get_realm
  when: create_realms == 'true'

- debug: var=get_realm.content|b64decode
  when: create_realms == 'true'

- name: Get SSO token
  shell:
    "curl --insecure -X POST 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/realms/master/protocol/openid-connect/token' \
    -H 'Content-Type: application/x-www-form-urlencoded' -d 'username={{ eval_rhsso_admin_username | default('keyadmin') }}' -d 'password={{ eval_rhsso_admin_password | default('keypassword') }}' -d 'grant_type=password' -d 'client_id=admin-cli'"
  register: token_text

- set_fact: TKN={{ (token_text.stdout | from_json).access_token }}

- name: Increase Token Lifespan (60mins)
  uri:
    url: "https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/admin/realms/master"
    method: PUT
    body: '{"realm":"master", "accessTokenLifespan":"3600"}'
    body_format: json
    headers:
      Content-Type: "application/json"
      Authorization: "Bearer {{ TKN }}"
    return_content: yes
    validate_certs: no
    status_code: 204

- name: Get SSO Token Longer Lifespan
  shell:
    "curl --insecure -X POST 'https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/realms/master/protocol/openid-connect/token' \
    -H 'Content-Type: application/x-www-form-urlencoded' -d 'username={{ eval_rhsso_admin_username | default('keyadmin') }}' -d 'password={{ eval_rhsso_admin_password | default('keypassword') }}' -d 'grant_type=password' -d 'client_id=admin-cli'"
  register: token_text

- set_fact: TKN={{ (token_text.stdout | from_json).access_token }}

- debug: var=TKN

- name: Create user realms
  include_tasks: ./create-realm.yml
  with_sequence: start=1 end={{ usersno }} format=user%d
  when: create_realms == 'true'

- name: Create threescale realm
  include_tasks: ./create-realm.yml
  vars:
    item: threescale
  when: create_realms == 'true'

#- name: Create OpenShift users (in sso)
#  uri:
#    url: "https://secure-sso-{{sso_project}}.{{ocp_apps_domain}}/auth/admin/realms/openshift/users"
#    method: POST
#    headers:
#      Content-Type: "application/json"
#      Authorization: "Bearer {{ TKN }}"
#    body: '{"username":"{{ item }}","enabled":true,"firstName":"{{ item }}","credentials":[{"type":"password","value":"openshift","temporary":false}]}'
#    body_format: json
#    validate_certs: no
#    status_code: [201, 409]
#  with_sequence: start=1 end={{ usersno }} format=user%d

- name: Make sure we go back to default project
  shell: "oc project default"
